#!/usr/bin/env sage
"""In this assignment, you will do some RSA calculations."""

import hashlib

# Assignment 1 (2 points)
#
# Suppose your RSA public key factors as p = 6569 and q = 8089, and
# the public exponent e is 11.  Suppose you were sent the Ciphertext
# 28901722.  Perform the RSA Decryption and recover the plaintext.

def assignment1():
    p = 6569
    q = 8089
    e = 11
    ciphertext = 28901722

    n = p*q
    totient = (p-1)*(q-1)

    var_d = var('var_d')
    d = solve_mod([var_d*e==1], totient)[0][0]

    plaintext = (ciphertext**d) % n

    # Check if your result is correct
    assert(hashlib.sha256(repr(plaintext)).hexdigest() ==
           '2b3981724c95cfdaa0ada4971b31946ec93bb95067a94da3a48c82aeac123815')


# Assignment 2 (1 point)
#
# Suppose that you want to encrypt the number 449 and send it to
# someone with public key n = 37617577, and e = 529

def assignment2():
    plaintext = 449
    n = 37617577
    e = 529

    ciphertext = plaintext**e % n

    # Check if your result is correct
    assert(hashlib.sha256(repr(ciphertext)).hexdigest() ==
           'bdef2483b6194471a65ec55c4fee5903ae010eb22ec43a4c49ce307b5e8aab9b')

# Assignment 3 (1 point)
#
# Suppose that you forgot your public exponent, but you know that the
# prime factors of your Key's modulus are 1723 and 5381. The private
# exponent is 223.  Find the public exponent.

def assignment3():
    p = 1723
    q = 5381
    d = 223

    totient = (p-1)*(q-1)

    var_e = var('var_e')
    e = solve_mod([var_e*d==1], totient)[0][0]

    # Check if your result is correct
    assert(hashlib.sha256(repr(e)).hexdigest() ==
           '33d329c9f49b682575859aa80b90075b1060d904b5432434546ab25af2af4320')


# Assignment 4 (6 points)
#

# You intercepted the secret message given below. You know that
# - the message is of length 10.
# - it consists of printable ASCII characters.
# - each character of the message has been encrypted
#   individually with the following RSA public key:
#
# n = 0x9B5945BD3DC565CEAA9F29EC07240174BB0E6A8E2CDDB04187C28FF9A4F8F1330D64B6E646725F1B16D01D7E16719FE32761012DE4DB6320136E6F81289C9A221DA8858AE23D6757B58C1B58519D338C8A17352D4E1CF8F5F7B466BFF36C9E0C9D00A262F31E306E6380687EF8A963F73A20290416E6630E1430E9A005473B01
# e = 0x229B1C13845514CC6ECE32F2971B746B95CF47861A91DAEA0943B5F1180C90B83A34F0E2BAC435B52EBB87670AE9C62D49FAB896900073AA53A1BD20E2140331462EFB1AC2024C038E76083677D68FAACA225E24B95FC4C67F166FB940601D0B9FB2C80E6641C65BE35894A36DCDDDD372FAC8040D23862DFDB449BC185EE12B
#
# Decrypt the message!
#
# Hint: If you get the error
# RuntimeError: exponent must be at most 9223372036854775807
# on calculating ((a**b) % c), use pow(a, b, c) instead.

def assignment4():
    n = 0x9B5945BD3DC565CEAA9F29EC07240174BB0E6A8E2CDDB04187C28FF9A4F8F1330D64B6E646725F1B16D01D7E16719FE32761012DE4DB6320136E6F81289C9A221DA8858AE23D6757B58C1B58519D338C8A17352D4E1CF8F5F7B466BFF36C9E0C9D00A262F31E306E6380687EF8A963F73A20290416E6630E1430E9A005473B01
    e = 0x229B1C13845514CC6ECE32F2971B746B95CF47861A91DAEA0943B5F1180C90B83A34F0E2BAC435B52EBB87670AE9C62D49FAB896900073AA53A1BD20E2140331462EFB1AC2024C038E76083677D68FAACA225E24B95FC4C67F166FB940601D0B9FB2C80E6641C65BE35894A36DCDDDD372FAC8040D23862DFDB449BC185EE12B
    ciphertext = \
    [
      0x1B3AE6C542568BEB904381ED19B74D21F521E438A71F58F3AE7ECE690440791279AF9320575F20CBE4EE3EB43C830173E64E6C6ED026900AF0CFF01DF831928EC092990A58E733419E31F3DE5B691E03270580F5805DEB1AD137D46D3DFC53387FBA3876B6A2A8639AE0DDE2845F4D690CD08E998F8D376FF4B9EC3F635B07D9
    , 0x96B949FECA5253588A2ED8A11B2AFE6C26589E69C1AE0325B238F9AFE016D39A1333B1DCAC412194A8F22F78B71A0EE3897BB8CC3277E76CC7FA50AFC2185FFC4E02AC09F0908ED7D0804606BE9D4C8A8EEC752A0619F2538B52258A56F91AA4441D26874C5DCBAD63349F51813544B80F38A6636287B4DB5094D96F218C17C5
    , 0x6F09110FB4DA18DD2A1C32B650779CCB5B8126F664A4A828C6610F3D9814A60A2F3D64FDC5951FE4B5AF4AC95FBA2A408D2774E1DFE02DF2AAAA3B74915EA57604B2F3E92E71C3DB12669060E6445623272B268E383B218C7C416C87A0307912017E38CD1514CEA521858ABDEAF2BB0C97F72F269388D6E7E2DA0B1120DCDB78
    , 0x65B50D1AC3D755C3924F0C087F1126A0B1F8A28E4215BB37AD62EBCDE4D9DDABC8542B29F46955AD5DF306177EF812A84011EEE7C405C8441BD9707EB998247C3E8F70C3E3ACF6E0B2A739596420CBC46FDF1D9B5CCF8988DBF460BBDDF90F6FAFD9C3356074E3E722D361A50FB6CBD01D0F9AEB328898062F6C4B03B527E1C6
    , 0x541EFB9EEBB6176E8C757578AC803B52A937556200F52ED754FFCF10D9029E874AB0CD43FE7B7C1E0F49428BABEFE43260CFC167472F4EECDB16EB746251099672CA903497DBEA7FD398C9D9A4467ACB683D7E39887776ED85288A2B8165AF505BF87C0CC7F7005BEE49A7B9BCA70A6F6BA8FA04B9ACA8F82CBB2E0C12E3E79F
    , 0x10E3F692C1FAFA08CF88D7F8BB240423978C8145351F7000999398632B7E023601237097746D41277C09A7E7F48ED765138AB63A870FE43D8C2FC6A49DE7148491A8FAB86B5B64E18AD3C130FBAD5E0E57EBB1B5B0E4FC90EA88F78C86E55A740F733C33A39D1A7ECE058BAB180FD6D97CAC15816B1369518BA31C6FE81DC887
    , 0x26F96670E72E9BA6EE5C49E56AD1049837A24158555D6F837AFBACDB14FC8374F970295A04BC09AE110F42D36AC26A837292A2FCE46C725CE2087D47600D14051FED87D32EFC471B0FDDA5DA088FF254BBE3EB9B73CD59FDCC6CC8387C24791D75571E9629FE78C2B14346F7F62898BD3C0957FE00D0ADF4FD0754DBB2A75A4C
    , 0x173F8B1A025C091339E785E1E7453FA0497AF458178BBF3A6E0B6647C59AEE87E29837329486D61B96A1C968E39140C7918098EC0C0040AAA0D02F39A8E038A43953826A099C388F15213BE75E3D3A8E91B40AA559B158F45FBB1015EF8E831415DC06675D24B04BDC1FD2F3ACE11BD775A13A75C4D828DB457445D49899F8D
    , 0x96B949FECA5253588A2ED8A11B2AFE6C26589E69C1AE0325B238F9AFE016D39A1333B1DCAC412194A8F22F78B71A0EE3897BB8CC3277E76CC7FA50AFC2185FFC4E02AC09F0908ED7D0804606BE9D4C8A8EEC752A0619F2538B52258A56F91AA4441D26874C5DCBAD63349F51813544B80F38A6636287B4DB5094D96F218C17C5
    , 0x1059D85E2A9E7B3D858A4C75362113D0EE22525C9C1B440244CB858D736E953DE767A25916B9DFABE6DE4F7EEB07377E0C3835B93642F728B65AB9DEBE7A1239FDBD9D72E13C392C9E1006EC258355B71115833E2C3C546B81F38900EAF678A92E24D21663B5051DD1D41C7BE0B14242272CADEEC519781F0F2ECFE879FB51D0
    ]
##################
# YOUR CODE HERE #
##################
    # Check if your result is correct
    assert(hashlib.sha256(repr(plaintext)).hexdigest() ==
           '786a19c83d21e7135e309b6151c1edde7db0d82348c99adb75d54d5d530cc13b')
    
def test():
    assignment1()
    assignment2()
    assignment3()
    #assignment4()

if __name__ == "__main__":
    test()
